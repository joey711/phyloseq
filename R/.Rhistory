call(parse(text=deparse(wtf)))
call(parse(text=deparse(wtf, control="all")))
parse(text=deparse(wtf), control="all")
parse(text=deparse(wtf, control="all"))
deparse(wtf, control="all")
deparse(wtf, control="")
deparse(wtf, control="keepInteger")
wtf
class(wtf)
as.list(wtf)
x
do.call("transform", c(list(x), as.list(wtf)))
setGeneric('myfun', function(x, y) standardGeneric('myfun'))#
setMethod('myfun',c('data.frame', 'expression'), function(x, y){#
	do.call("transform", c(list(x), as.list(y)))#
})#
# try out the new method#
z <- expression(NewVar = Petal.Width*Petal.Length)#
test <- myfun(iris, z)#
names(test)
do.call()
test
?error
?check
prune_species(species, x2)
foo <- function(species, x){#
	print("This is the method.")#
	# All phyloseqFather children have an otuTable slot, no need to test.#
	x@otuTable <- prune_species(species, x@otuTable)#
	#
	# Test if slot is present. If so, perform the component prune.#
	if( !is.null(access(x, "taxTab")) ){#
		x@taxTab    <- prune_species(species, x@taxTab)#
	}#
	if( !is.null(access(x, "tre")) ){#
		x@tre       <- prune_species(species, x@tre)#
	}#
	return(x)#
}
x2
species
x1 <- ex1
foo(species, x1)
prune_species(species, x2)
prune_species(species, x1)
#################################################################################
#' @name prune_species#
#' @aliases prune_species,character,otuTree-method#
#' @docType methods#
#' @rdname prune_species-methods#
setMethod("prune_species", signature("character", "otuTree"), function(species, x){#
	if( !is.null(access(x, "tre")) ){#
		x@tre       <- prune_species(species, x@tre)#
	}#
	return(x)#
})
prune_species(species, x1)
library("phylsoeq")
library("phyloseq")
x1<-ex1
data(ex1)
x1<-ex1
prune_species(x1, species.names(x1)[1:100])
prune_species(species.names(x1)[1:100], x1)
library("devtools")
install_github("phyloseq", "joey711")
library("phyloseq")
data(ex1)
calcplot(ex1 ~ Diet + Gender)
calcplot(ex1)
calcplot(ex1~)
calcplot(ex1~Diet)
X <- ex1~Diet
X
RDA_or_CCA="cca"
object=get(all.vars(X)[1])
object
	if( substr(RDA_or_CCA, 1, 1) %in% c("R", "r") ){#
		mod <- rda.phyloseq(X)		#
	} else if( substr(RDA_or_CCA, 1, 1) %in% c("C", "c") ){#
		mod <- cca.phyloseq(X)		#
	} else {#
		cat("You did not properly specify the desired ordination method\n")#
		cat("Please see documentation.\n")		#
		return()#
	}
mod
	ord_vars <- all.vars(X)[-1]
ord_vars
	# default is to use the R.H.S. elements of X as color and shape#
	plot_ordination_phyloseq(mod,#
		object = object, #
		site_shape_category = ord_vars[1],#
		site_color_category = ord_vars[2]#
	)
ex1~
ex1~laskdjflask
ex1~.
 X <- ex1~.
	ord_vars <- all.vars(X)[-1]
	ord_vars
plot_ordination_phyloseq(mod, object)
	list(mod=mod, object=object)
X <- ex1~Diet
all.vars(X)[-1]
	popcall
X <- ex1~Diet #
RDA_or_CCA="cca"#
object=get(all.vars(X)[1])#
#
	if( substr(RDA_or_CCA, 1, 1) %in% c("R", "r") ){#
		mod <- rda.phyloseq(X)		#
	} else if( substr(RDA_or_CCA, 1, 1) %in% c("C", "c") ){#
		mod <- cca.phyloseq(X)		#
	} else {#
		cat("You did not properly specify the desired ordination method\n")#
		cat("Please see documentation.\n")		#
		return()#
	}#
#
	# X <- ex1~.#
	ord_vars <- all.vars(X)[-1]#
#
	# Initialize call list for plot_ordination_phyloseq#
	popcallList <- list(mod=mod, object=object)#
#
	if( ord_vars[1] != "."){#
		popcallList <- c(popcallList, list(site_color_category = ord_vars[1]))#
	} #
	if( length(ord_vars) > 1){#
		popcallList <- c(popcallList, list(site_shape_category = ord_vars[2]))#
	}#
	#
	popcallList
X <- ex1~Diet + Sex
	# X <- ex1~.#
	ord_vars <- all.vars(X)[-1]#
#
	# Initialize call list for plot_ordination_phyloseq#
	popcallList <- list(mod=mod, object=object)#
#
	if( ord_vars[1] != "."){#
		popcallList <- c(popcallList, list(site_color_category = ord_vars[1]))#
	} #
	if( length(ord_vars) > 1){#
		popcallList <- c(popcallList, list(site_shape_category = ord_vars[2]))#
	}#
	#
	popcallList
X <- ex1~Diet + Sex#
RDA_or_CCA="cca"#
object=get(all.vars(X)[1])#
#
	if( substr(RDA_or_CCA, 1, 1) %in% c("R", "r") ){#
		mod <- rda.phyloseq(X)		#
	} else if( substr(RDA_or_CCA, 1, 1) %in% c("C", "c") ){#
		mod <- cca.phyloseq(X)		#
	} else {#
		cat("You did not properly specify the desired ordination method\n")#
		cat("Please see documentation.\n")		#
		return()#
	}#
#
	# X <- ex1~.#
	ord_vars <- all.vars(X)[-1]#
#
	# Initialize call list for plot_ordination_phyloseq#
	popcallList <- list(mod=mod, object=object)#
#
	if( ord_vars[1] != "."){#
		popcallList <- c(popcallList, list(site_color_category = ord_vars[1]))#
	} #
	if( length(ord_vars) > 1){#
		popcallList <- c(popcallList, list(site_shape_category = ord_vars[2]))#
	}#
	#
	do.call("plot_ordination_phyloseq", popcallList)
X <- ex1~Diet + Gender#
RDA_or_CCA="cca"#
object=get(all.vars(X)[1])#
#
	if( substr(RDA_or_CCA, 1, 1) %in% c("R", "r") ){#
		mod <- rda.phyloseq(X)		#
	} else if( substr(RDA_or_CCA, 1, 1) %in% c("C", "c") ){#
		mod <- cca.phyloseq(X)		#
	} else {#
		cat("You did not properly specify the desired ordination method\n")#
		cat("Please see documentation.\n")		#
		return()#
	}#
#
	# X <- ex1~.#
	ord_vars <- all.vars(X)[-1]#
#
	# Initialize call list for plot_ordination_phyloseq#
	popcallList <- list(mod=mod, object=object)#
#
	if( ord_vars[1] != "."){#
		popcallList <- c(popcallList, list(site_color_category = ord_vars[1]))#
	} #
	if( length(ord_vars) > 1){#
		popcallList <- c(popcallList, list(site_shape_category = ord_vars[2]))#
	}#
	#
	do.call("plot_ordination_phyloseq", popcallList)
X <- ex1 ~ Diet#
RDA_or_CCA="cca"#
object=get(all.vars(X)[1])#
#
	if( substr(RDA_or_CCA, 1, 1) %in% c("R", "r") ){#
		mod <- rda.phyloseq(X)		#
	} else if( substr(RDA_or_CCA, 1, 1) %in% c("C", "c") ){#
		mod <- cca.phyloseq(X)		#
	} else {#
		cat("You did not properly specify the desired ordination method\n")#
		cat("Please see documentation.\n")		#
		return()#
	}#
#
	# X <- ex1~.#
	ord_vars <- all.vars(X)[-1]#
#
	# Initialize call list for plot_ordination_phyloseq#
	popcallList <- list(mod=mod, object=object)#
#
	if( ord_vars[1] != "."){#
		popcallList <- c(popcallList, list(site_color_category = ord_vars[1]))#
	} #
	if( length(ord_vars) > 1){#
		popcallList <- c(popcallList, list(site_shape_category = ord_vars[2]))#
	}#
	#
	do.call("plot_ordination_phyloseq", popcallList)
X <- ex1 ~ .#
RDA_or_CCA="cca"#
object=get(all.vars(X)[1])#
#
	if( substr(RDA_or_CCA, 1, 1) %in% c("R", "r") ){#
		mod <- rda.phyloseq(X)		#
	} else if( substr(RDA_or_CCA, 1, 1) %in% c("C", "c") ){#
		mod <- cca.phyloseq(X)		#
	} else {#
		cat("You did not properly specify the desired ordination method\n")#
		cat("Please see documentation.\n")		#
		return()#
	}#
#
	# X <- ex1~.#
	ord_vars <- all.vars(X)[-1]#
#
	# Initialize call list for plot_ordination_phyloseq#
	popcallList <- list(mod=mod, object=object)#
#
	if( ord_vars[1] != "."){#
		popcallList <- c(popcallList, list(site_color_category = ord_vars[1]))#
	} #
	if( length(ord_vars) > 1){#
		popcallList <- c(popcallList, list(site_shape_category = ord_vars[2]))#
	}#
	#
	do.call("plot_ordination_phyloseq", popcallList)
?warning
class(ex1~.)
?formula
library("phyloseq")
library(phyloseq)
?ex2
MHsangerFN <- "~/Dropbox/R/enterotype_example/phylo_tables/MetaHIT_41SangerSamples.genus.txt"#
MHillumiFN <- "~/Dropbox/R/enterotype_example/phylo_tables/MetaHIT_85IlluminaSamples.genus.txt"#
TpyroseqFN <- "~/Dropbox/R/enterotype_example/phylo_tables/Turnbaugh_154Pyroseq16S.genus.txt"#
#
MHsanger <- read.table(MHsangerFN, TRUE, "\t")#
MHillumi <- read.table(MHillumiFN, TRUE, "\t")#
Tpyroseq <- read.table(TpyroseqFN, TRUE, "\t")
Tpyroseq
ETaltfile <- "~/Dropbox/R/enterotype_example/ETclassAltLines.txt"
ETalt <- readLines(ETaltfile)
ETaltfile <- "~/Dropbox/R/enterotype_example/ETclassAltLines.txt"
ETalt <- readLines(ETaltfile)
ETalt
seq(1, length(ETalt), 2)
ETalt[seq(1, length(ETalt), 2)]
ETvalues      <- ETalt[seq(2, length(ETalt), 2)]
ETvalues
cbind(samples=ETsampleNames, enterotype=ETvalues)
ETsampleNames <- ETalt[seq(1, length(ETalt), 2)]
cbind(samples=ETsampleNames, enterotype=ETvalues)
ETaltfile <- "~/Dropbox/R/enterotype_example/ETclassAltLines.txt"#
ETalt <- readLines(ETaltfile)#
ETsampleNames <- ETalt[seq(1, length(ETalt), 2)]#
ETvalues      <- ETalt[seq(2, length(ETalt), 2)]#
cbind(samples=ETsampleNames, enterotype=ETvalues)
partialET <- cbind(samples=ETsampleNames, enterotype=ETvalues)
write.table(partialET, "~/Dropbox/R/enterotype_example/partialET.txt", quote=FALSE, sep="\t")
write.table(partialET, "~/Dropbox/R/enterotype_example/partialET.txt", quote=FALSE, sep="\t", row.names=FALSE)
read.table(etfile)
etfile <- "~/Dropbox/R/enterotype_example/ET_class_tab.txt"
read.table(etfile)
read.table(etfile, header=TRUE)
et
et <- read.table(etfile, header=TRUE)
class(et)
row.names(et) <- et$Subject
head(et)
sampleMap(et)
etSM <- sampleMap(et)
sample.names(etSM)
intersect(sample.names(MHS), sample.names(etSM))
# Now import into phyloseq#
library("phyloseq")#
MHS <- otuTable(MHsanger, TRUE)#
MHI <- otuTable(MHillumi, TRUE)#
TPS <- otuTable(Tpyroseq, TRUE)
intersect(sample.names(MHS), sample.names(etSM))
sample.names(MHS)
OTU <- merge_phyloseq(MHS, MHI, TPS)
intersect(sample.names(OTU), sample.names(etSM))
sample.names(OTU)
Tpyroseq
TPS
Tpyroseq
colnames(Tpyroseq)
MHsangerFN <- "~/Dropbox/R/enterotype_example/phylo_tables/MetaHIT_41SangerSamples.genus.txt"#
MHillumiFN <- "~/Dropbox/R/enterotype_example/phylo_tables/MetaHIT_85IlluminaSamples.genus.txt"#
TpyroseqFN <- "~/Dropbox/R/enterotype_example/phylo_tables/Turnbaugh_154Pyroseq16S.genus.txt"#
#
MHsanger <- read.table(MHsangerFN, TRUE, "\t")#
MHillumi <- read.table(MHillumiFN, TRUE, "\t")#
Tpyroseq <- read.table(TpyroseqFN, TRUE, "\t")
# Now import into phyloseq#
library("phyloseq")#
MHS <- otuTable(MHsanger, TRUE)#
MHI <- otuTable(MHillumi, TRUE)#
TPS <- otuTable(Tpyroseq, TRUE)
TPS
# check for sample overlap between files#
length(intersect(sample.names(MHS), sample.names(MHI)))==0#
length(intersect(sample.names(MHS), sample.names(TPS)))==0#
length(intersect(sample.names(MHI), sample.names(TPS)))==0
# Start with enterotype designation...#
etfile <- "~/Dropbox/R/enterotype_example/ET_class_tab.txt"#
et <- read.table(etfile, header=TRUE)#
row.names(et) <- et$Subject#
#
etSM <- sampleMap(et)#
intersect(sample.names(OTU), sample.names(etSM))
sample.names(etSM)
sample.names(OTU)
OTU <- merge_phyloseq(MHS, MHI, TPS)
intersect(sample.names(OTU), sample.names(etSM))
length(intersect(sample.names(OTU), sample.names(etSM))) == nsamples(OTU)
nsamples(OTU)
length(intersect(sample.names(OTU), sample.names(etSM)))
nsamples(OTU) == nsamples(etSM)
nsamples(etSM)
nsamples(OTU)
(setdiff(sample.names(OTU), sample.names(etSM)))
nsamples(OTU) > nsamples(etSM)
length(intersect(sample.names(OTU), sample.names(etSM))) == nsamples(OTU)
nsamples(OTU) > nsamples(etSM)
(setdiff(sample.names(OTU), sample.names(etSM)))
trivSM <- sampleMap(data.frame(Sample_ID=sample.names(OTU), row.names=sample.names(OTU)))
trivSM
trivDF <- data.frame(Sample_ID=sample.names(OTU), row.names=sample.names(OTU))
trivDF <- data.frame(Sample_ID=sample.names(OTU), source="TBD", row.names=sample.names(OTU))
trivDF
trivDF[row.names(trivDF)%in%sample.names(TPS), "source"]
trivDF[row.names(trivDF)%in%sample.names(TPS), "source"] <- "Turnbaugh"
row.names(trivDF)
row.names(trivDF)%in%sample.names(TPS)
trivDF[row.names(trivDF)%in%sample.names(TPS), "source"]
trivDF
trivDF <- data.frame(Sample_ID=sample.names(OTU), source="TBD", row.names=sample.names(OTU))
trivDF[row.names(trivDF)%in%sample.names(TPS), "source"] <- "Turnbaugh"
source_data
source_data <- rep("TBD", times=nrow(trivDF))
source_data
source_data <- rep("TBD", times=nrow(trivDF)); names(source_data) <- row.names(trivDF)
source_data
source_data[names(source_data)%in%sample.names(TPS), "source"] <- "Turnbaugh"
source_data[names(source_data)%in%sample.names(TPS)] <- "Turnbaugh"
source_data
source_data[names(source_data)%in%sample.names(MHI)] <- "MHillumina"
source_data <- rep("TBD", times=nrow(trivDF)); names(source_data) <- row.names(trivDF)#
source_data[names(source_data)%in%sample.names(TPS)] <- "Pyro454"#
source_data[names(source_data)%in%sample.names(MHI)] <- "Illumina"#
source_data[names(source_data)%in%sample.names(MHS)] <- "Sanger"
source_data
etvec <- rep(NA_character_, times=nsamples(OTU))
etvec
names(etvec) <- sample.names(OTU)
etvec
et
etvec[row.names(et)] <- et[, "Enterotype"]
etvec
et[, "Enterotype"]
etvec[row.names(et)]
etvec
SMDF <- data.frame(Sample_ID=sample.names(OTU), SeqTech=source_data, Enterotype=et, row.names=sample.names(OTU))
SMDF <- data.frame(Sample_ID=sample.names(OTU), SeqTech=source_data, Enterotype=etvec, row.names=sample.names(OTU))
SMDF
SM   <- sampleMap(SMDF)
SM
(setdiff(sample.names(OTU), sample.names(SM)))
(setdiff(sample.names(OTU), sample.names(SM))==0)
length(setdiff(sample.names(OTU), sample.names(SM)))==0
length(setdiff(sample.names(OTU), sample.names(SM)))==0
phyloseq(OTU, SM)
species.names(OTU)
matrix(species.names(OTU), nrow=nspecies(OTU), 1)
?matrix
matrix(species.names(OTU), nrow=nspecies(OTU), 1, dimnames=list(species.names(OTU), "Genus"))
TM
TM <- matrix(species.names(OTU), nrow=nspecies(OTU), 1, dimnames=list(species.names(OTU), "Genus"))
TM["-1", "Genus"]
TM["-1", "Genus"] <- NA_character_
head(TM)
TM[c("-1", "Bacteria"), "Genus"] <- NA_character_
head(TM)
TT <- taxTab(TM)
enterotype <- phyloseq(OTU, SM, TT)
enterotype
enterotypefile <- "~/github/phyloseq_bioc/data/enterotype.RData"
save(list="enterotype", file=enterotypefile)
xsub
(xsub <- read.table(xsubfile, TRUE, "\t"))
xsubfile <- "~/Dropbox/R/enterotype_example/baseSampleInfo.txt"
(xsub <- read.table(xsubfile, TRUE, "\t"))
rownames(xsub) <- xsub[, "SampleID"]
xsub
xsubSM <- sampleMap(xsub)
xsubSM
merge_phyloseq(SM, xsubSM)
superSM <- merge_phyloseq(SM, xsubSM)
data.frame(superSM)
enterotype <- phyloseq(OTU, superSM, TT)
enterotype
# Save to appropriate location in phyloseq package.#
enterotypefile <- "~/github/phyloseq_bioc/data/enterotype.RData"#
save(list="enterotype", file=enterotypefile)
nsamples(enterotype)
colnames(sampleMap(enterotype))
calcplot(enterotype ~ Enterotype)
x <- subset_samples(enterotype, !is.na(Enterotype))
x
calcplot(x ~ Enterotype)
nrow(sampleMap(x))
ncol(otuTable(x))
nrow(sampleMap(enterotype))
cca.phyloseq(x ~ Enterotype)
entcca <- cca.phyloseq(x ~ Enterotype)
ent.cca <- cca.phyloseq(x ~ Enterotype)
plot_ordination_phyloseq(ent.cca, x, site_color_category=Enterotype)
speciesSums(x)
speciesSums(x)==0
sum(speciesSums(x)==0)
species.names(x)[(speciesSums(x)==0)]
species.names(x)[(speciesSums(x)==0)]
x <- prune_species(species.names(x)[(speciesSums(x)==0)], x)
calcplot(x ~ Enterotype)
sampleSums(x)
x <- subset_samples(enterotype, !is.na(Enterotype))
x <- prune_species(species.names(x)[(speciesSums(x)>0)], x)
sampleSums(x)
calcplot(x ~ Enterotype)
ent.cca <- cca.phyloseq(x ~ .)
?cca.phyloseq
ent.cca <- cca.phyloseq(x ~ Enterotype)
plot_ordination_phyloseq(ent.cca, x, site_color_category=Enterotype)
plot_ordination_phyloseq(ent.cca, x, site_color_category="Enterotype")
# Make combined object:#
enterotype <- phyloseq(OTU, superSM, TT)#
#
# remove genera that don't appear anywhere (speciesSum is zero)#
enterotype <- prune_species(species.names(enterotype)[(speciesSums(enterotype)>0)], enterotype)#
#
# Save to appropriate location in phyloseq package.#
enterotypefile <- "~/github/phyloseq_bioc/data/enterotype.RData"#
save(list="enterotype", file=enterotypefile)
enterotype
data.frame(sampleMap(x))[, "Enterotype"]==2
mt(x, data.frame(sampleMap(x))[, "Enterotype"]==2)
#################################################################################
#' @aliases mt,phyloseq,ANY-method#
#' @rdname mt-methods#
setMethod("mt", c("phyloseq", "ANY"), function(physeq, classlabel, minPmaxT="minP", ...){#
	# If sampleMap slot is non-empty, and the classlabel is a character-class#
	# length(classlabel) == 1#
	if( !is.null(sampleMap(physeq, FALSE)) & class(classlabel)=="character" & length(classlabel)==1 ){#
		rawFactor  <- as(sampleMap(physeq), "data.frame")[, classlabel[1]]#
		if( class(rawFactor) != "factor" ){#
			rawFactor <- factor(rawFactor)#
		}#
		classlabel <- rawFactor#
	} # Either way, dispatch on otuTable(physeq)#
	mt(otuTable(physeq), classlabel, minPmaxT, ...)#
})
mt(x, data.frame(sampleMap(x))[, "Enterotype"]==2)
as(c(TRUE, FALSE), "integer")
#################################################################################
# Coerce logical to integer, pass-on#
#' @aliases mt,otuTable,logical-method#
#' @rdname mt-methods#
setMethod("mt", c("otuTable", "logical"), function(physeq, classlabel, minPmaxT="minP", ...){#
	mt(physeq, as(classlabel, "integer"), minPmaxT="minP", ...)#
})
mt(x, data.frame(sampleMap(x))[, "Enterotype"]==2)
